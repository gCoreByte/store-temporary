{
  "version": 3,
  "sources": ["../../../app/routes/login.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/login.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/login.tsx\");\n  import.meta.hot.lastModified = \"1732345359794.2427\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { Form, useActionData, useNavigation } from \"@remix-run/react\";\nimport { z } from \"zod\";\nimport { login, createUserSession } from \"../utils/auth.server\";\nimport { Button } from \"~/components/ui/button\";\nimport { Input } from \"~/components/ui/input\";\nimport { Label } from \"~/components/ui/label\";\nimport { useToast } from \"~/hooks/use-toast\";\nconst LoginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6)\n});\nexport async function loader({\n  request\n}) {\n  const session = await getSession(request.headers.get(\"Cookie\"));\n  if (session.has(\"user\")) {\n    return redirect(\"/\");\n  }\n  return json({});\n}\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  const data = Object.fromEntries(formData);\n  try {\n    const {\n      email,\n      password\n    } = LoginSchema.parse(data);\n    const user = await login(email, password);\n    if (!user) {\n      return json({\n        error: \"Invalid credentials\"\n      }, {\n        status: 400\n      });\n    }\n    return createUserSession(user, user.role === \"ADMIN\" ? \"/admin\" : \"/\");\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return json({\n        error: \"Invalid form data\"\n      }, {\n        status: 400\n      });\n    }\n    return json({\n      error: \"Server error\"\n    }, {\n      status: 500\n    });\n  }\n}\nexport default function Login() {\n  _s();\n  const actionData = useActionData();\n  const navigation = useNavigation();\n  const {\n    toast\n  } = useToast();\n  if (actionData?.error) {\n    toast({\n      title: \"Error\",\n      description: actionData.error,\n      variant: \"destructive\"\n    });\n  }\n  return <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900 dark:text-white\">\n            Sign in to your account\n          </h2>\n        </div>\n        <Form method=\"post\" className=\"mt-8 space-y-6\">\n          <div className=\"rounded-md shadow-sm space-y-4\">\n            <div>\n              <Label htmlFor=\"email\">Email address</Label>\n              <Input id=\"email\" name=\"email\" type=\"email\" autoComplete=\"email\" required className=\"mt-1\" />\n            </div>\n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <Input id=\"password\" name=\"password\" type=\"password\" autoComplete=\"current-password\" required className=\"mt-1\" />\n            </div>\n          </div>\n\n          <Button type=\"submit\" className=\"w-full\" disabled={navigation.state === \"submitting\"}>\n            {navigation.state === \"submitting\" ? \"Signing in...\" : \"Sign in\"}\n          </Button>\n        </Form>\n      </div>\n    </div>;\n}\n_s(Login, \"ejU0KXskKS6V4Ohk/tAsNEupiws=\", false, function () {\n  return [useActionData, useNavigation, useToast];\n});\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAAqB;AAGrB,kBAAyC;AAqE/B;AA5FV,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,2BAA6B,EAAE;AAAA,EACxE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAsB;AACtB,cAAY,IAAI,eAAe;AACjC;AAWA,IAAM,cAAc,EAAE,OAAO;AAAA,EAC3B,OAAO,EAAE,OAAO,EAAE,MAAM;AAAA,EACxB,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC;AAC5B,CAAC;AA4Cc,SAAR,QAAyB;AAC9B,KAAG;AACH,QAAM,aAAa,cAAc;AACjC,QAAM,aAAa,cAAc;AACjC,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,SAAS;AACb,MAAI,YAAY,OAAO;AACrB,UAAM;AAAA,MACJ,OAAO;AAAA,MACP,aAAa,WAAW;AAAA,MACxB,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AACA,SAAO,mDAAC,SAAI,WAAU,wGAClB,6DAAC,SAAI,WAAU,6BACb;AAAA,uDAAC,SACC,6DAAC,QAAG,WAAU,0EAAyE,uCAAvF;AAAA;AAAA;AAAA;AAAA,WAEA,KAHF;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,IACA,mDAAC,QAAK,QAAO,QAAO,WAAU,kBAC5B;AAAA,yDAAC,SAAI,WAAU,kCACb;AAAA,2DAAC,SACC;AAAA,6DAAC,SAAM,SAAQ,SAAQ,6BAAvB;AAAA;AAAA;AAAA;AAAA,iBAAoC;AAAA,UACpC,mDAAC,SAAM,IAAG,SAAQ,MAAK,SAAQ,MAAK,SAAQ,cAAa,SAAQ,UAAQ,MAAC,WAAU,UAApF;AAAA;AAAA;AAAA;AAAA,iBAA2F;AAAA,aAF7F;AAAA;AAAA;AAAA;AAAA,eAGA;AAAA,QACA,mDAAC,SACC;AAAA,6DAAC,SAAM,SAAQ,YAAW,wBAA1B;AAAA;AAAA;AAAA;AAAA,iBAAkC;AAAA,UAClC,mDAAC,SAAM,IAAG,YAAW,MAAK,YAAW,MAAK,YAAW,cAAa,oBAAmB,UAAQ,MAAC,WAAU,UAAxG;AAAA;AAAA;AAAA;AAAA,iBAA+G;AAAA,aAFjH;AAAA;AAAA;AAAA;AAAA,eAGA;AAAA,WARF;AAAA;AAAA;AAAA;AAAA,aASA;AAAA,MAEA,mDAAC,UAAO,MAAK,UAAS,WAAU,UAAS,UAAU,WAAW,UAAU,cACrE,qBAAW,UAAU,eAAe,kBAAkB,aADzD;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAdF;AAAA;AAAA;AAAA;AAAA,WAeA;AAAA,OArBF;AAAA;AAAA;AAAA;AAAA,SAsBA,KAvBG;AAAA;AAAA;AAAA;AAAA,SAwBL;AACJ;AACA,GAAG,OAAO,gCAAgC,OAAO,WAAY;AAC3D,SAAO,CAAC,eAAe,eAAe,QAAQ;AAChD,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,OAAO;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
